/*
const factorial := proc(var n: float) -> float {
	if n <= 1 then return 1;
	return n * factorial(n - 1);
}

// 0, 1, 1, 2, 3, 5, 8
// 0, 1, 2, 3, 4, 5, 6

const fib := proc(var a: int) -> int {
	if a <= 0 then return 0;
	if a == 1 then return 1;
	var b:= fib(a - 1);
	var c:= fib(a - 2);
	var d:= b + c;
	print("=================== a: %d, b: %d, c: %d, d: %d\n", a, b, c, d);
	return d;
}

const adder := proc(var x: int, var y: int) -> int {
	return x + y;
}

const subtractor := proc(var x: int, var y: int) -> int {
	return x - y;
}

const execute := proc(var a: int, var b: int, var op: proc(int, int) -> int) -> int {
	return op(a, b);
}

const Vec2 := struct {
	var x: float;
	var y: float;
}

const vec2_add := proc(var a: Vec2, var b: Vec2) -> Vec2 {
	var r: Vec2;
	r.x = a.x + b.x;
	r.y = a.y + b.y;
	return r;
}

const get_two := proc() -> int { return 2; }

const print_numbers := proc(var a: int, var b: int, var c: int, var d: int) {
	print("a: %d, b: %d, c: %d, d: %d\n", a, b, c, d);
}
*/

const Node := struct {
	var data: int;
	var next: *Node;
}

const print_nodes := proc (var head: *Node) {
	while (head != null) {
		print("%d -> ", head.data);
		head = head.next;
	}
	print("null\n");
}

const main := proc() {
	var a: Node;
	a.data = 1;
	a.next = null;
	//a.next = allocate(size_of(Node));
	//a.next.data = 2;
	//a.next.next = allocate(size_of(Node));
	//a.next.next.data = 3;
	//a.next.next = null;

	print_nodes(*a);

	//print("a.data: %d, a.next: %d\n", a.data, a.next);
	
	//var a: Vec2;
	//a.x = 7;
	//a.y = 8;

	//var b: Vec2;
	//b.x = 8;
	//b.y = 7;

	//var c:= vec2_add(a, b);
	//print("a = { x = %f, y = %f }\n", a.x, a.y);
	//print("b = { x = %f, y = %f }\n", b.x, b.y);
	//print("c (a + b) = { x = %f, y = %f }\n", c.x, c.y);

	//var numbers: [2]int;
	//numbers[0] = 6;
	//numbers[1] = 9;
	//var result:= execute(numbers[0], numbers[1], proc(var a: int, var b: int) -> int { return a * b; });
	//var result:= get_two() + execute(numbers[0], numbers[1], adder) + get_two();
	//print("%d op %d is %d\n", numbers[0], numbers[1], result);

	//var number: int = 2; 
	//print("number: %d\n", number);
	//var result: int = fib(number);
	//print("Fib of %d is %d\n", number, result);

	//var a: int; var b: int; var c: int; var d: int;
	//a = 1; b = 2; c = 3; d = 4;
	//print("previous: %d\n", a);
	//print_numbers(a, b, c, d);
}
